{"ast":null,"code":"import axios from 'axios';\nimport * as actionType from './actionTypes';\nimport Cookies from \"js-cookie\";\nexport const authStart = () => {\n  return {\n    type: actionType.AUTH_START\n  };\n};\nexport const authSuccess = (token, userID, userName, isAdmin) => {\n  return {\n    type: actionType.AUTH_SUCCESS,\n    idToken: token,\n    userID: userID,\n    userName: userName,\n    isAdmin: isAdmin\n  };\n};\nexport const authError = error => {\n  return {\n    type: actionType.AUTH_ERROR,\n    error: error\n  };\n};\nexport const logOut = () => {\n  Cookies.remove('token', {\n    path: ''\n  });\n  return {\n    type: actionType.AUTH_LOGOUT\n  };\n};\nexport const auth = (password, name, isSignup) => {\n  return dispatch => {\n    dispatch(authStart());\n    let authData = null;\n    isSignup ? authData = {\n      email: email,\n      password: password,\n      name: name\n    } : authData = {\n      email: name,\n      password: password\n    };\n    let url = null;\n    isSignup ? url = 'http://localhost:4000/api/users' : url = 'http://localhost:4000/api/auth';\n    axios.post(url, authData).then(response => {\n      let name = response.data.name;\n      let id = response.data._id;\n      let isAdmin = response.data.isAdmin; //let token = Object.entries(response.headers)[2];\n      //token = token[1];\n\n      const token = response.headers.x_auth_token;\n      Cookies.set('token', token);\n      dispatch(authSuccess(token, id, name, isAdmin));\n    }).catch(error => {\n      dispatch(authError(error.response.data.error));\n    });\n  };\n};\nexport const authCheckState = () => {\n  return async dispatch => {\n    const token = Cookies.get('token');\n\n    if (token) {\n      const headers = {\n        'Content-Type': 'application/json',\n        'x-auth-token': token\n      };\n\n      try {\n        let res = await axios.post('http://localhost:4000/api/auth/verifyToken', null, {\n          headers: headers\n        });\n        const userId = res.data.userId;\n        const userName = res.data.user;\n        const isAdmin = res.data.isAdmin;\n        dispatch(authSuccess(token, userId, userName, isAdmin));\n      } catch (error) {\n        Cookies.remove('token', {\n          path: ''\n        });\n        dispatch(authError(error.response.data));\n      }\n    }\n  };\n};\nexport const clientAuth = () => {\n  return async dispatch => {\n    await dispatch(authCheckState());\n  };\n};\nexport const serverAuth = req => {\n  return async dispatch => {\n    if (req.headers.cookie) {\n      const cookie = req.headers.cookie.substr(6);\n      const headers = {\n        'Content-Type': 'application/json',\n        'x-auth-token': cookie\n      };\n\n      try {\n        let res = await axios.post('http://localhost:4000/api/auth/verifyToken', null, {\n          headers: headers\n        });\n        const userId = res.data.userId;\n        const userName = res.data.user;\n        const isAdmin = res.data.isAdmin;\n        dispatch(authSuccess(cookie, userId, userName, isAdmin));\n      } catch (error) {\n        console.log(error.response.data);\n        dispatch(authError(error.response.data));\n      }\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/javie/OneDrive/Escritorio/repository/devportfolio/store/actions/Auth.js"],"names":["axios","actionType","Cookies","authStart","type","AUTH_START","authSuccess","token","userID","userName","isAdmin","AUTH_SUCCESS","idToken","authError","error","AUTH_ERROR","logOut","remove","path","AUTH_LOGOUT","auth","password","name","isSignup","dispatch","authData","email","url","post","then","response","data","id","_id","headers","x_auth_token","set","catch","authCheckState","get","res","userId","user","clientAuth","serverAuth","req","cookie","substr","console","log"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport * as actionType from './actionTypes';\r\nimport Cookies from \"js-cookie\";\r\n\r\nexport const authStart = () => {\r\n  return {\r\n    type: actionType.AUTH_START\r\n  }\r\n}\r\n\r\nexport const authSuccess = (token, userID, userName, isAdmin) => {\r\n  return {\r\n    type: actionType.AUTH_SUCCESS,\r\n    idToken: token,\r\n    userID: userID,\r\n    userName: userName,\r\n    isAdmin: isAdmin\r\n  }\r\n}\r\n\r\nexport const authError = (error) => {\r\n  return {\r\n    type: actionType.AUTH_ERROR,\r\n    error: error\r\n  }\r\n}\r\n\r\nexport const logOut = () => {\r\n  Cookies.remove('token', { path: '' });\r\n  return {\r\n    type: actionType.AUTH_LOGOUT\r\n  }\r\n}\r\n\r\nexport const auth = (password, name, isSignup) => {\r\n  return dispatch => {\r\n    dispatch(authStart());\r\n    let authData = null;\r\n    isSignup ? authData = {\r\n      email: email,\r\n      password: password,\r\n      name: name\r\n    } :\r\n      authData = {\r\n        email: name,\r\n        password: password\r\n      }\r\n    let url = null;\r\n    isSignup ? url = 'http://localhost:4000/api/users' : url = 'http://localhost:4000/api/auth';\r\n    axios.post(url, authData)\r\n      .then(response => {\r\n        let name = response.data.name;\r\n        let id = response.data._id;\r\n        let isAdmin = response.data.isAdmin;\r\n        //let token = Object.entries(response.headers)[2];\r\n        //token = token[1];\r\n        const token = response.headers.x_auth_token;\r\n        Cookies.set('token', token);\r\n        dispatch(authSuccess(token, id, name, isAdmin));\r\n      })\r\n      .catch(error => {\r\n        dispatch(authError(error.response.data.error));\r\n      });\r\n  };\r\n};\r\n\r\n\r\nexport const authCheckState = () => {\r\n  return async dispatch => {\r\n    const token = Cookies.get('token');\r\n    if (token) {\r\n      const headers = {\r\n        'Content-Type': 'application/json',\r\n        'x-auth-token': token\r\n      }\r\n      try {\r\n        let res = await axios.post('http://localhost:4000/api/auth/verifyToken', null, { headers: headers });\r\n        const userId = res.data.userId;\r\n        const userName = res.data.user;\r\n        const isAdmin = res.data.isAdmin;\r\n        dispatch(authSuccess(token, userId, userName, isAdmin));\r\n      } catch (error) {\r\n        Cookies.remove('token', { path: '' });\r\n        dispatch(authError(error.response.data));\r\n      }\r\n    }\r\n  };\r\n};\r\nexport const clientAuth = () => {\r\n  return async dispatch => {\r\n    await dispatch(authCheckState());\r\n  }\r\n}\r\nexport const serverAuth = (req) => {\r\n  return async dispatch => {\r\n    if (req.headers.cookie) {\r\n      const cookie = req.headers.cookie.substr(6);\r\n      const headers = {\r\n        'Content-Type': 'application/json',\r\n        'x-auth-token': cookie\r\n      }\r\n      try {\r\n        let res = await axios.post('http://localhost:4000/api/auth/verifyToken', null, { headers: headers })\r\n        const userId = res.data.userId;\r\n        const userName = res.data.user;\r\n        const isAdmin = res.data.isAdmin;\r\n        dispatch(authSuccess(cookie, userId, userName, isAdmin));\r\n      } catch (error) {\r\n        console.log(error.response.data)\r\n        dispatch(authError(error.response.data));\r\n      }\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}