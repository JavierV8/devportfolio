{"ast":null,"code":"import axios from 'axios';\nimport * as actionType from './actionType';\nimport Cookies from \"js-cookie\";\nexport const authStart = () => {\n  return {\n    type: actionType.AUTH_START\n  };\n};\nexport const authSuccess = (token, userID, userName, isAdmin) => {\n  return {\n    type: actionType.AUTH_SUCCESS,\n    idToken: token,\n    userID: userID,\n    userName: userName,\n    isAdmin: isAdmin\n  };\n};\nexport const authError = error => {\n  return {\n    type: actionType.AUTH_ERROR,\n    error: error\n  };\n};\nexport const logOut = () => {\n  Cookies.remove('token', {\n    path: ''\n  });\n  return {\n    type: actionType.AUTH_LOGOUT\n  };\n}; //NEW USER----------------------------------------------------------------------------------\n\nexport const newUser = (name, email, password) => {\n  return async dispatch => {\n    dispatch(authStart());\n    const token = Cookies.get('token');\n\n    if (token) {\n      const headers = {\n        'Content-Type': 'application/json',\n        'x-auth-token': token\n      };\n    }\n\n    const authData = {\n      email: email,\n      password: password,\n      name: name\n    };\n\n    try {\n      let res = await axios.post(actionType.URL + 'users', authData, {\n        headers: headers\n      });\n      const {\n        name,\n        _id,\n        isAdmin\n      } = res.data;\n      const token = res.headers.x_auth_token;\n      Cookies.set('token', token);\n      dispatch(authSuccess(token, _id, name, isAdmin));\n    } catch {\n      dispatch(authError(error.response.data.error));\n    }\n  };\n}; //LOGIN------------------------------------------------------------------------------------\n\nexport const login = (password, name) => {\n  return async dispatch => {\n    dispatch(authStart());\n    const authData = {\n      email: name,\n      password: password\n    };\n\n    try {\n      let res = await axios.post(actionType.URL + 'auth', authData);\n      const {\n        name,\n        _id,\n        isAdmin\n      } = res.data;\n      const token = res.headers.x_auth_token;\n      Cookies.set('token', token);\n      dispatch(authSuccess(token, _id, name, isAdmin));\n    } catch {\n      dispatch(authError(\"error!!!\"));\n    }\n\n    ;\n  };\n}; //CHECK FOR TOKEN ON CLIENT SIDE----------------------------------------------------------\n\nexport const clientAuth = () => {\n  return async dispatch => {\n    await dispatch(authCheckState());\n  };\n};\nexport const authCheckState = () => {\n  return async dispatch => {\n    const token = Cookies.get('token');\n\n    if (token) {\n      const headers = {\n        'Content-Type': 'application/json',\n        'x-auth-token': token\n      };\n\n      try {\n        let res = await axios.post(actionType.URL + 'auth/verifyToken', null, {\n          headers: headers\n        });\n        const {\n          userId,\n          userName,\n          isAdmin\n        } = res.data;\n        dispatch(authSuccess(token, userId, userName, isAdmin));\n      } catch (error) {\n        Cookies.remove('token', {\n          path: ''\n        });\n        dispatch(authError(error.response.data));\n      }\n    }\n  };\n}; //CHECK FOR TOKEN ON SERVER SIDE-------------------------------------------------------------------------\n\nexport const serverAuth = req => {\n  return async dispatch => {\n    if (req.headers.cookie) {\n      const cookie = req.headers.cookie.substr(6);\n      const headers = {\n        'Content-Type': 'application/json',\n        'x-auth-token': cookie\n      };\n\n      try {\n        let res = await axios.post(actionType.URL + 'auth/verifyToken', null, {\n          headers: headers\n        });\n        const {\n          userId,\n          userName,\n          isAdmin\n        } = res.data;\n        dispatch(authSuccess(cookie, userId, userName, isAdmin));\n      } catch (error) {\n        console.log(error.response.data);\n        dispatch(authError(error.response.data));\n      }\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/javie/OneDrive/Escritorio/a/devportfolio/store/actions/auth.js"],"names":["axios","actionType","Cookies","authStart","type","AUTH_START","authSuccess","token","userID","userName","isAdmin","AUTH_SUCCESS","idToken","authError","error","AUTH_ERROR","logOut","remove","path","AUTH_LOGOUT","newUser","name","email","password","dispatch","get","headers","authData","res","post","URL","_id","data","x_auth_token","set","response","login","clientAuth","authCheckState","userId","serverAuth","req","cookie","substr","console","log"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport * as actionType from './actionType';\r\nimport Cookies from \"js-cookie\";\r\n\r\nexport const authStart = () => {\r\n  return {\r\n    type: actionType.AUTH_START\r\n  }\r\n}\r\n\r\nexport const authSuccess = (token, userID, userName, isAdmin) => {\r\n  return {\r\n    type: actionType.AUTH_SUCCESS,\r\n    idToken: token,\r\n    userID: userID,\r\n    userName: userName,\r\n    isAdmin: isAdmin\r\n  }\r\n}\r\n\r\nexport const authError = (error) => {\r\n  return {\r\n    type: actionType.AUTH_ERROR,\r\n    error: error\r\n  }\r\n}\r\n\r\nexport const logOut = () => {\r\n  Cookies.remove('token', { path: '' });\r\n  return {\r\n    type: actionType.AUTH_LOGOUT\r\n  }\r\n}\r\n\r\n//NEW USER----------------------------------------------------------------------------------\r\nexport const newUser = (name, email, password) => {\r\n  return async dispatch => {\r\n    dispatch(authStart());\r\n    const token = Cookies.get('token');\r\n    if (token) {\r\n      const headers = {\r\n        'Content-Type': 'application/json',\r\n        'x-auth-token': token\r\n      }\r\n    }\r\n    const authData = {\r\n      email: email,\r\n      password: password,\r\n      name: name\r\n    };\r\n    try {\r\n      let res = await axios.post(actionType.URL + 'users', authData, { headers: headers });\r\n      const { name, _id, isAdmin } = res.data;\r\n      const token = res.headers.x_auth_token;\r\n      Cookies.set('token', token);\r\n      dispatch(authSuccess(token, _id, name, isAdmin));\r\n    }\r\n    catch {\r\n      dispatch(authError(error.response.data.error));\r\n    }\r\n  }\r\n};\r\n\r\n//LOGIN------------------------------------------------------------------------------------\r\nexport const login = (password, name) => {\r\n  return async dispatch => {\r\n    dispatch(authStart());\r\n    const authData = {\r\n      email: name,\r\n      password: password\r\n    }\r\n    try {\r\n      let res = await axios.post(actionType.URL + 'auth', authData);\r\n      const { name, _id, isAdmin } = res.data;\r\n      const token = res.headers.x_auth_token;\r\n      Cookies.set('token', token);\r\n      dispatch(authSuccess(token, _id, name, isAdmin));\r\n    }\r\n    catch {\r\n      dispatch(authError(\"error!!!\"));\r\n    };\r\n  };\r\n};\r\n\r\n\r\n//CHECK FOR TOKEN ON CLIENT SIDE----------------------------------------------------------\r\nexport const clientAuth = () => {\r\n  return async dispatch => {\r\n    await dispatch(authCheckState());\r\n  }\r\n}\r\n\r\nexport const authCheckState = () => {\r\n  return async dispatch => {\r\n    const token = Cookies.get('token');\r\n    if (token) {\r\n      const headers = {\r\n        'Content-Type': 'application/json',\r\n        'x-auth-token': token\r\n      }\r\n      try {\r\n        let res = await axios.post(actionType.URL + 'auth/verifyToken', null, { headers: headers });\r\n        const { userId, userName, isAdmin } = res.data;\r\n        dispatch(authSuccess(token, userId, userName, isAdmin));\r\n      } catch (error) {\r\n        Cookies.remove('token', { path: '' });\r\n        dispatch(authError(error.response.data));\r\n      }\r\n    }\r\n  };\r\n};\r\n\r\n//CHECK FOR TOKEN ON SERVER SIDE-------------------------------------------------------------------------\r\nexport const serverAuth = (req) => {\r\n  return async dispatch => {\r\n    if (req.headers.cookie) {\r\n      const cookie = req.headers.cookie.substr(6);\r\n      const headers = {\r\n        'Content-Type': 'application/json',\r\n        'x-auth-token': cookie\r\n      }\r\n      try {\r\n        let res = await axios.post(actionType.URL + 'auth/verifyToken', null, { headers: headers })\r\n        const { userId, userName, isAdmin } = res.data;\r\n        dispatch(authSuccess(cookie, userId, userName, isAdmin));\r\n      } catch (error) {\r\n        console.log(error.response.data)\r\n        dispatch(authError(error.response.data));\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}